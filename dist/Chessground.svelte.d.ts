/** @typedef {typeof __propDef.props}  ChessgroundProps */
/** @typedef {typeof __propDef.events}  ChessgroundEvents */
/** @typedef {typeof __propDef.slots}  ChessgroundSlots */
export default class Chessground extends SvelteComponentTyped<{
    class?: string | undefined;
    fen?: string | undefined;
    orientation?: "white" | "black" | undefined;
    turnColor?: "white" | "black" | undefined;
    check?: boolean | "white" | "black" | undefined;
    lastMove?: import("chessground/types").Key[] | undefined;
    selected?: import("chessground/types").Key | undefined;
    coordinates?: boolean | undefined;
    autoCastle?: boolean | undefined;
    viewOnly?: boolean | undefined;
    disableContextMenu?: boolean | undefined;
    addPieceZIndex?: boolean | undefined;
    addDimensionsCssVarsTo?: HTMLElement | undefined;
    blockTouchScroll?: boolean | undefined;
    config?: import("chessground/config").Config | undefined;
    set?: ((config: import("chessground/config").Config) => void) | undefined;
    getState?: (() => import("chessground/state").State) | undefined;
    getFen?: (() => string) | undefined;
    toggleOrientation?: (() => void) | undefined;
    move?: ((orig: import("chessground/types").Key, dest: import("chessground/types").Key) => void) | undefined;
    setPieces?: ((pieces: import("chessground/types").PiecesDiff) => void) | undefined;
    selectSquare?: ((key: import("chessground/types").Key | null, force?: boolean | undefined) => void) | undefined;
    newPiece?: ((piece: import("chessground/types").Piece, key: import("chessground/types").Key) => void) | undefined;
    playPremove?: (() => boolean) | undefined;
    cancelPremove?: (() => void) | undefined;
    playPredrop?: ((validate: (drop: import("chessground/types").Drop) => boolean) => boolean) | undefined;
    cancelPredrop?: (() => void) | undefined;
    cancelMove?: (() => void) | undefined;
    stop?: (() => void) | undefined;
    explode?: ((keys: import("chessground/types").Key[]) => void) | undefined;
    setShapes?: ((shapes: import("chessground/draw").DrawShape[]) => void) | undefined;
    setAutoShapes?: ((shapes: import("chessground/draw").DrawShape[]) => void) | undefined;
    redrawAll?: (() => void) | undefined;
    dragNewPiece?: ((piece: import("chessground/types").Piece, event: import("chessground/types").MouchEvent, force?: boolean | undefined) => void) | undefined;
    destroy?: (() => void) | undefined;
}, {
    [evt: string]: CustomEvent<any>;
}, {}> {
    get set(): (config: import("chessground/config").Config) => void;
    get getState(): () => import("chessground/state").State;
    get getFen(): () => string;
    get toggleOrientation(): () => void;
    get move(): (orig: import("chessground/types").Key, dest: import("chessground/types").Key) => void;
    get setPieces(): (pieces: import("chessground/types").PiecesDiff) => void;
    get selectSquare(): (key: import("chessground/types").Key | null, force?: boolean | undefined) => void;
    get newPiece(): (piece: import("chessground/types").Piece, key: import("chessground/types").Key) => void;
    get playPremove(): () => boolean;
    get cancelPremove(): () => void;
    get playPredrop(): (validate: (drop: import("chessground/types").Drop) => boolean) => boolean;
    get cancelPredrop(): () => void;
    get cancelMove(): () => void;
    get stop(): () => void;
    get explode(): (keys: import("chessground/types").Key[]) => void;
    get setShapes(): (shapes: import("chessground/draw").DrawShape[]) => void;
    get setAutoShapes(): (shapes: import("chessground/draw").DrawShape[]) => void;
    get redrawAll(): () => void;
    get dragNewPiece(): (piece: import("chessground/types").Piece, event: import("chessground/types").MouchEvent, force?: boolean | undefined) => void;
    get destroy(): () => void;
}
export type ChessgroundProps = typeof __propDef.props;
export type ChessgroundEvents = typeof __propDef.events;
export type ChessgroundSlots = typeof __propDef.slots;
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        class?: string | undefined;
        fen?: import('chessground/types').FEN | undefined;
        orientation?: import('chessground/types').Color | undefined;
        turnColor?: import('chessground/types').Color | undefined;
        check?: import('chessground/types').Color | boolean | undefined;
        lastMove?: import('chessground/types').Key[] | undefined;
        selected?: import('chessground/types').Key | undefined;
        coordinates?: boolean | undefined;
        autoCastle?: boolean | undefined;
        viewOnly?: boolean | undefined;
        disableContextMenu?: boolean | undefined;
        addPieceZIndex?: boolean | undefined;
        addDimensionsCssVarsTo?: HTMLElement | undefined;
        blockTouchScroll?: boolean | undefined;
        config?: import("chessground/config").Config | undefined;
        set?: ((config: import('chessground/config').Config) => void) | undefined;
        getState?: (() => import('chessground/state').State) | undefined;
        getFen?: (() => import('chessground/types').FEN) | undefined;
        toggleOrientation?: (() => void) | undefined;
        move?: ((orig: import('chessground/types').Key, dest: import('chessground/types').Key) => void) | undefined;
        setPieces?: ((pieces: import('chessground/types').PiecesDiff) => void) | undefined;
        selectSquare?: ((key: import('chessground/types').Key | null, force?: boolean | undefined) => void) | undefined;
        newPiece?: ((piece: import('chessground/types').Piece, key: import('chessground/types').Key) => void) | undefined;
        playPremove?: (() => boolean) | undefined;
        cancelPremove?: (() => void) | undefined;
        playPredrop?: ((validate: (drop: import('chessground/types').Drop) => boolean) => boolean) | undefined;
        cancelPredrop?: (() => void) | undefined;
        cancelMove?: (() => void) | undefined;
        stop?: (() => void) | undefined;
        explode?: ((keys: import('chessground/types').Key[]) => void) | undefined;
        setShapes?: ((shapes: import('chessground/draw').DrawShape[]) => void) | undefined;
        setAutoShapes?: ((shapes: import('chessground/draw').DrawShape[]) => void) | undefined;
        redrawAll?: (() => void) | undefined;
        dragNewPiece?: ((piece: import('chessground/types').Piece, event: import('chessground/types').MouchEvent, force?: boolean | undefined) => void) | undefined;
        destroy?: (() => void) | undefined;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export {};
